// 1. Promise是一个 构造函数，既然是一个构造函数，就可以通过new Promise()得到一个Promise 的实例
// 2. 再Promise上，有两个函数，分别叫做 resolve(成功之后的回调函数), 和reject(失败之后的回调函数)
// 3. 再Promise 构造函数的 Prototype 属性上有一个 .then()方法，也就是说，只要是Promise构造函数创建的实例，都可以访问到 .then（）方法
// 4. Promise 表示一个 异步操作； 每当我们 new 一个 Promise 实例， 这个实例就表示一个具体的异步操作
// 5. 既然Promise 创建的实例是一个异步操作， 那么这个异步操作的结果，只能由两种状态：
//  5.1 状态1：异步执行成功了，需要在内部调用成功的回调函数 resolve 把结果返回给调用者
//  5.2 状态2：异步执行失败了，需要在内部调用成功的回调函数 reject 把结果返回给调用者
//  5.3 由于 Promise 的实例是一个异步操作，所以，内部拿到 操作的结果后，无法使用 return 把操作的结果返回给调用者； 这时候，只能使用回调函数的形式，来吧结果返回给调用者
// 6. 我们可以在 new出来的 Promise 实例上，调用 .then()方法， 预先为这个 Promise 异步操作， 指定 成功(resolve) 和 失败(reject) 回调函数